html, body, #root {
    height: 100%;
}

/*
    as the header is out of the dom control and so, all the element in the body must start
    from below the header. So, 'padding-top' is set to the height of the header
*/

body{
    padding-top: 60px;
}

/*
    Not-used here but is important!

    setting the position to 'absolute' will make sure that the element is placed with respect 
    to it's parent.

    Note that setting the top and left of absolute positioned element will set the position respect to
    the entire window as long as the parent is static (i.e. according to the DOM).
    The element is positioned with respect to the parent element and top&left property are also 
    with respect to parent element if the parent is non-static (i.e. relative).

    Here, we set the top&left to zero. And if we want that the element is placed with respect to 
    it's parent with the given top and left then we must have to make the parent to
    non-static (i.e. position: relative;)
*/

.sideNav {
    top: 0;
    left: -250px;
    position: fixed;
    display: flex;
    flex-direction: column;
    height: 100%;
    width: 250px;
    justify-content: center;
}

.sideNav-item {
    padding:5px;
    margin-left: auto;
    margin-right: auto; 
    margin-top: 10px;
    margin-bottom: 10px;
}

.sideNav-nested {
    display: flex;
    flex-direction: column;
}

/*
    To make the content appears just below the buttons, We first align the buttons to the 
    center of the screen and then we make the nested-item to take the half width of the parent
    and start this half width from the back side (so, "align-self: flex-end")
*/

.nested-item {
    width: 50%;
    align-self: flex-end;
    margin-bottom: 10px;
    margin-right: 10px;
}

.img-hamburger {
    z-index: 1000000000;
    /*box-shadow: 1px 1px 2px;*/
}

.img-hamburger:hover {
    background: #a1a0a0;
}

@media (min-width: 800px) {
    .img-hamburger {
        box-shadow: none;
    }

    .sideNav {
        left: 0;
    }
}

/*
    BEM : Block Element Modifier

    placing this modifier above media query will not works as it is over-ridden by the style of the 
    media query
*/

.sideNav--show {
    left: 0;
}

.sideNav--hide {
    left : -250px;
}

.img-hamburger--show-shadow {
    /* box-shadow: 1px 1px 2px; */
}

.img-hamburger--hide-shadow {
    box-shadow: none;
}

/*
---- END OF MODIFIER ----
*/

.footer {
    width: 100%;
    padding: 10px;
    margin-top: 10px;
    flex: 0 0 auto;
}

/*
    setting up the space for main-contents
*/
.main-content-with-menu-closed {
    width: 100%;
    height: 100%;
}

.main-content-with-menu-open {
    width: 100%;
    height: 100%;
    padding-left: 250px;
}

.main-content-without-footer {
    padding-right: 20px;
    padding-left: 20px;
    padding-top: 10px;

}

/*
    This makes the main-content to take the remaining space (if available)
    this just set the 'flex-grow: 1' 
    by doing this we ensure that the footer is always at the bottom

    To make it work the parent must have a display property of 'flex'. So, the div in 'App.js'
    have classes 'd-flex flex-column'
*/

.main-content {
    flex: 1 0 auto;
}

/*
TODO : ADDING MEDIA QUERIES
*/

.card {
    width: 100px;
    height: 100px;
    box-shadow: 2px 2px 2px;
    margin-right: 50px;
    margin-bottom: 50px;
    padding: 10px;
}